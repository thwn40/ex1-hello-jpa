/*
유용한 단축키
ctrl+방향키= 커서만 내리기
ctrl+e = 최근 사용했던 파일
ctrl+j = 같은 단어 순서대로 선택
ctrl+alt+l = 자동 줄 정렬
플러시 = 값을 바꾸면 커밋시점에 영속성컨텍스트의 변경을 반영한다,동기화
영속상태 = 엔티티매니저에 들어가있는 상태
identity = 알아서 해, id에 값을 넣으면 안됨, 그럼 null로 db에 가겠지, 그럼그때 딱 값 세팅
모아서 insert 불가능

일대다에서 다쪽이 주인  = 외래키가 있는곳
양방향일땐 양쪽에 값을 다 세팅
컨트롤러에 엔티티 반환 금지

//다대일
다중성,단방향,양방향, 연관관계의 주인=외래키를 관리하는 참조

//일대다
실무에서 거의 안씀,엔티티가 관리하는 외래키가 다른 테이블에 있고, 연관관계 관리를 위해 추가로 update 쿼리가 나감, 결론 : 다대일 양방향 매핑 사용

//일대일
외래키가 있는곳이 연관관계의 주인, 반대편은 mappedBy 적용

//다대다
다대다는 중간테이블 만들어서 함 , 근데 쓰지마삼

//고급매핑
조인 전략, 싱글 테이블 전략, 구현 클래스 전략
조인전략 쓰삼

//mappedsuperclass
공통으로 사용할 매핑정보는  mappedsuperclass를 이용한다, 속성만 내려주는 친구, 조회 검색 불가, 추상클래스로 사용하는걸 추천

//프록시
처음사용할때 한번만 초기화, 프록시는 유지 타겟만 바뀜 , 타입체크 시 instance of 사용

//즉시로딩 지연로딩
무조건 지연로딩 사용 ManyToOne, OneToOne

/cascade
밑에있는 애들까지 연쇄 저장, 파일을 여러군데에서 관리하면 사용x
//고아객체
참조하는 곳이 하나 일때 사용, 특정 엔티티가 개인 소유할때 사용, ONETOONE, ONETOMANY

//값타입
임베디드 타입은 equals 만들기 (동등성 비교하기), 값 타입은 통째로 갈아 끼우어야 한다
값 타입은 식별자 개념이 없어서 추적이 어렵다.























 */